using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Ark.Data.Editor
{
	static partial class TableGenerator
	{
		public static void Run(TableGeneratorConfig config)
		{
			var srcPath = Path.GetFullPath(config.CsvPath);
			var outputPath = Path.GetFullPath(config.OutputPath);
			var exportList = config.GetExportList();

			if (srcPath.EndsWith('/') || srcPath.EndsWith('\\'))
				srcPath = srcPath.Substring(0, srcPath.Length - 1);

			var dict = new SortedDictionary<string, TableDefine>();

			// 加载所有csv表格
			var srcFiles = Directory.GetFiles(srcPath, "*.csv", SearchOption.AllDirectories);
			for (int i = 0; i < srcFiles.Length; i++)
			{
				var srcFile = Path.GetFullPath(srcFiles[i]);
				var isNest = Path.GetDirectoryName(srcFile) != srcPath;  
				LoadTable(dict, srcFile, isNest);
			}

			// 预处理
			var removeTableList = new List<string>();
			foreach (var kv in dict)
			{
				var table = kv.Value;
				Preprocess(table, config);

				if (!CanExport(table, exportList))
					removeTableList.Add(kv.Key);
			}

			// 移除不导出的表
			foreach (var removeTableName in removeTableList)
				dict.Remove(removeTableName);

			// 写入目标文件
			using (var stream = File.Open(outputPath, FileMode.Create, FileAccess.Write))
			using (var output = new StreamWriter(stream, Encoding.UTF8))
			{
				output.NewLine = "\n";

				output.WriteLine("// Auto-generated by TableGenerator. Don't modify this file manually.");
				output.WriteLine();

				output.WriteLine("using System.Collections.Generic;");
				output.WriteLine("using System.Runtime.CompilerServices;");
				output.WriteLine("using System;");
				output.WriteLine("using Ark.Data;");

				if (config.EnableOdinInspector)
					output.WriteLine("using Sirenix.OdinInspector;");

				foreach (var u in config.UsingNamespace)
					output.WriteLine($"using {u};");

				output.WriteLine();

				output.WriteLine("#if UNITY_5_3_OR_NEWER");
				output.WriteLine("using vector2 = UnityEngine.Vector2;");
				output.WriteLine("using vector3 = UnityEngine.Vector3;");
				output.WriteLine("#endif");

				if (config.Float2FP)
					output.WriteLine("using fp = FixMath.FP;");

				output.WriteLine();

				// 写入记录结构体
				WriteRecords(dict, output, config);

				// 写入表格定义
				if (config.WriteTables)
					WriteTables(dict, output, config);

				output.Flush();
			}
		}

		private static void Log(string text)
		{
#if UNITY_EDITOR
			UnityEngine.Debug.Log(text);
#else
			System.Console.WriteLine(text);
#endif
		}

		private static void LogError(string text) 
		{
#if UNITY_EDITOR
			UnityEngine.Debug.LogError(text);
#else
			System.Console.WriteLine(text);
#endif
		}
	}
}
